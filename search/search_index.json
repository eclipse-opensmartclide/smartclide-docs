{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SmartCLIDE integrated platform. The SmartCLIDE project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 871177. For more general information about the SmartCLIDE project visit smartclide.eu . About the project The main objective of SmartCLIDE is to propose a radically new smart cloud-native development environment, based on the coding-by-demonstration principle, that will support creators of cloud services in the discovery , creation, composition, testing , and deployment of full-stack data-centered services and applications in the cloud. SmartCLIDE will provide high levels of abstraction at all stages (development, testing, deployment, and run-time) as well as self-discovery of IaaS and SaaS Services. SmartCLIDE will provide several categories of abstractions: at development stage, SmartCLIDE will provide abstractions on data transformations or processing at testing stage, mechanisms to visualize flow and status or artifacts to automatically test the expected behavior at deployment stage, abstractions of physical and virtual resources or at runtime, mechanisms to monitor the performance and operation of the service The cloud nature of the environment will enable collaboration between different stakeholders, and the self-discovery of IaaS and SaaS services and the high levels of abstraction will facilitate the composition and deployment of new services to nontechnical staff (with no previous experience on programming or on the administration of systems and infrastructure). Equally, hiding the complexity of the infrastructure, and adding intelligence to this layer, will allow selecting the most adequate infrastructure services in each moment. SmartCLIDE will allow SMEs and Public Administration to boost the adoption of Cloud solutions, being validated at one solution-oriented to Public Administration (Social Security System) and three different IoT products of software development SMEs within the consortium. Modules The SmartCLIDE platform consists of the following modules: Context Handling Service Creation Service Discovery Service Deployment Runtime Monitoring & Verification (RMV) Front-end Interface SmartCLIDE API Gateway SmartCLIDE DB API License Distributed under the Eclipse Public License 2.0. See LICENSE for more information.","title":"Home"},{"location":"#welcome-to-the-smartclide-integrated-platform","text":"The SmartCLIDE project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 871177. For more general information about the SmartCLIDE project visit smartclide.eu .","title":"Welcome to the SmartCLIDE integrated platform."},{"location":"#about-the-project","text":"The main objective of SmartCLIDE is to propose a radically new smart cloud-native development environment, based on the coding-by-demonstration principle, that will support creators of cloud services in the discovery , creation, composition, testing , and deployment of full-stack data-centered services and applications in the cloud. SmartCLIDE will provide high levels of abstraction at all stages (development, testing, deployment, and run-time) as well as self-discovery of IaaS and SaaS Services. SmartCLIDE will provide several categories of abstractions: at development stage, SmartCLIDE will provide abstractions on data transformations or processing at testing stage, mechanisms to visualize flow and status or artifacts to automatically test the expected behavior at deployment stage, abstractions of physical and virtual resources or at runtime, mechanisms to monitor the performance and operation of the service The cloud nature of the environment will enable collaboration between different stakeholders, and the self-discovery of IaaS and SaaS services and the high levels of abstraction will facilitate the composition and deployment of new services to nontechnical staff (with no previous experience on programming or on the administration of systems and infrastructure). Equally, hiding the complexity of the infrastructure, and adding intelligence to this layer, will allow selecting the most adequate infrastructure services in each moment. SmartCLIDE will allow SMEs and Public Administration to boost the adoption of Cloud solutions, being validated at one solution-oriented to Public Administration (Social Security System) and three different IoT products of software development SMEs within the consortium.","title":"About the project"},{"location":"#modules","text":"The SmartCLIDE platform consists of the following modules: Context Handling Service Creation Service Discovery Service Deployment Runtime Monitoring & Verification (RMV) Front-end Interface SmartCLIDE API Gateway SmartCLIDE DB API","title":"Modules"},{"location":"#license","text":"Distributed under the Eclipse Public License 2.0. See LICENSE for more information.","title":"License"},{"location":"context-handling/","text":"smartclide-context SmartCLIDE Context Handling Component Preconditions to build and run Context Handling To build and run Context Handling, the following software is required: Java (at least version 11) Apache Maven (at least version 3.5.4) Docker (for running tests and deploying Context Handling on the SmartCLIDE cluster) docker-compose (for running local sample instance only) How to build Context Handling Context Handling can be built using maven with the following command: shell mvn install In order to build and push a container image that can be deployed, the following command can be used: shell mvn install mvn jib:build -pl smartclide-monitoring -Djib.to.image=\"${IMAGE_NAME:IMAGE_TAG}\" -Djib.to.auth.username=\"${CONTAINER_REGISTRY_USERNAME}\" -Djib.to.auth.password=\"${CONTAINER_REGISTRY_TOKEN}\" How to run Context Handling A sample configuration and docker-compose file can be found in the samples folder . You can run the sample with the following command: shell docker-compose -f samples/docker-compose.yml up How to configure Context Handling Monitoring Config monitoring-config.xml An example monitoring configuration can be found here: monitoring-config.xml monitoring-config.xsd The corresponding XSD file can be found here: monitoring-config.xsd Description indexes Each index entry has the following mandatory attributes id: The unique name of the index location: The URI of the location the index is stored datasources Each datasource entry has the following mandatory attributes id:The unique name of the datasource type:The type of the datasource. Possible values are: filesystem, webservice, database, messageBroker monitor:The class of the monitor to be used. Possible values are: package de.atb.context.monitoring.monitors.database.DatabaseMonitor package de.atb.context.monitoring.monitors.file.FileSystemMonitor package de.atb.context.monitoring.monitors.file.FilePairSystemMonitor package de.atb.context.monitoring.monitors.file.FileTripletSystemMonitor package de.atb.context.monitoring.monitors.webservice.MessageBrokerMonitor package de.atb.context.monitoring.monitors.webservice.WebServiceMonitor package de.atb.context.monitoring.monitors.GitlabCommitMonitor package de.atb.context.monitoring.monitors.GitMonitor options: Options for the datasource can be entered using this value. The options are dependent on the datasource to be used uri:The uri of the data source to be monitored class:The following datasource implementations are available package de.atb.context.monitoring.config.models.datasources.DatabaseDataSource package de.atb.context.monitoring.config.models.datasources.FilePairSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileTripletSystemDataSource package de.atb.context.monitoring.config.models.datasources.MessageBrokerDataSource package de.atb.context.monitoring.config.models.datasources.WebServiceDataSource package de.atb.context.monitoring.config.models.datasources.GitlabDataSource interpreters Each interpreter entry has the following mandatory attributes id: The unique name of the interpreter configuration analyser: The analyser class to be used. The following implementations are available: package de.atb.context.monitoring.analyser.database.DatabaseAnalyser package de.atb.context.monitoring.analyser.file.FileAnalyser package de.atb.context.monitoring.analyser.file.FilePairAnalyser package de.atb.context.monitoring.analyser.file.FileTripletAnalyser package de.atb.context.monitoring.analyser.webservice.MessageBrokerAnalyser package de.atb.context.monitoring.analyser.webservice.WebServiceAnalyser package de.atb.context.monitoring.analyser.webserviceGitAnalyser package de.atb.context.monitoring.analyser.webservice.GitlabCommitAnalyser parser: The parser class to be used. The following implementations are available: package de.atb.context.monitoring.parser.database.DatabaseParser package de.atb.context.monitoring.parser.file.FileParser package de.atb.context.monitoring.parser.file.FilePairParser package de.atb.context.monitoring.parser.file.FileTripletParser package de.atb.context.monitoring.parser.webservice.MessageBrokerParser package de.atb.context.monitoring.parser.webservice.WebServiceParser package de.atb.context.monitoring.parser.GitlabCommitParser package de.atb.context.monitoring.parser.GitParser type: Currently only used for File analyser and parser. Defines the file extensions to be used. monitors Each monitor entry has the following mandatory attributes id: The unique name of the monitor datasource: The id of one previously defined datasource (see above) interpreter: The id of one previously defined interpreter (see above) index: The id of one previously defined index (see above)","title":"Context Handling"},{"location":"context-handling/#smartclide-context","text":"SmartCLIDE Context Handling Component","title":"smartclide-context"},{"location":"context-handling/#preconditions-to-build-and-run-context-handling","text":"To build and run Context Handling, the following software is required: Java (at least version 11) Apache Maven (at least version 3.5.4) Docker (for running tests and deploying Context Handling on the SmartCLIDE cluster) docker-compose (for running local sample instance only)","title":"Preconditions to build and run Context Handling"},{"location":"context-handling/#how-to-build-context-handling","text":"Context Handling can be built using maven with the following command: shell mvn install In order to build and push a container image that can be deployed, the following command can be used: shell mvn install mvn jib:build -pl smartclide-monitoring -Djib.to.image=\"${IMAGE_NAME:IMAGE_TAG}\" -Djib.to.auth.username=\"${CONTAINER_REGISTRY_USERNAME}\" -Djib.to.auth.password=\"${CONTAINER_REGISTRY_TOKEN}\"","title":"How to build Context Handling"},{"location":"context-handling/#how-to-run-context-handling","text":"A sample configuration and docker-compose file can be found in the samples folder . You can run the sample with the following command: shell docker-compose -f samples/docker-compose.yml up","title":"How to run Context Handling"},{"location":"context-handling/#how-to-configure-context-handling","text":"","title":"How to configure Context Handling"},{"location":"context-handling/#monitoring-config","text":"monitoring-config.xml An example monitoring configuration can be found here: monitoring-config.xml monitoring-config.xsd The corresponding XSD file can be found here: monitoring-config.xsd","title":"Monitoring Config"},{"location":"context-handling/#description","text":"","title":"Description"},{"location":"context-handling/#indexes","text":"Each index entry has the following mandatory attributes id: The unique name of the index location: The URI of the location the index is stored","title":"indexes"},{"location":"context-handling/#datasources","text":"Each datasource entry has the following mandatory attributes id:The unique name of the datasource type:The type of the datasource. Possible values are: filesystem, webservice, database, messageBroker monitor:The class of the monitor to be used. Possible values are: package de.atb.context.monitoring.monitors.database.DatabaseMonitor package de.atb.context.monitoring.monitors.file.FileSystemMonitor package de.atb.context.monitoring.monitors.file.FilePairSystemMonitor package de.atb.context.monitoring.monitors.file.FileTripletSystemMonitor package de.atb.context.monitoring.monitors.webservice.MessageBrokerMonitor package de.atb.context.monitoring.monitors.webservice.WebServiceMonitor package de.atb.context.monitoring.monitors.GitlabCommitMonitor package de.atb.context.monitoring.monitors.GitMonitor options: Options for the datasource can be entered using this value. The options are dependent on the datasource to be used uri:The uri of the data source to be monitored class:The following datasource implementations are available package de.atb.context.monitoring.config.models.datasources.DatabaseDataSource package de.atb.context.monitoring.config.models.datasources.FilePairSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileTripletSystemDataSource package de.atb.context.monitoring.config.models.datasources.MessageBrokerDataSource package de.atb.context.monitoring.config.models.datasources.WebServiceDataSource package de.atb.context.monitoring.config.models.datasources.GitlabDataSource","title":"datasources"},{"location":"context-handling/#interpreters","text":"Each interpreter entry has the following mandatory attributes id: The unique name of the interpreter configuration analyser: The analyser class to be used. The following implementations are available: package de.atb.context.monitoring.analyser.database.DatabaseAnalyser package de.atb.context.monitoring.analyser.file.FileAnalyser package de.atb.context.monitoring.analyser.file.FilePairAnalyser package de.atb.context.monitoring.analyser.file.FileTripletAnalyser package de.atb.context.monitoring.analyser.webservice.MessageBrokerAnalyser package de.atb.context.monitoring.analyser.webservice.WebServiceAnalyser package de.atb.context.monitoring.analyser.webserviceGitAnalyser package de.atb.context.monitoring.analyser.webservice.GitlabCommitAnalyser parser: The parser class to be used. The following implementations are available: package de.atb.context.monitoring.parser.database.DatabaseParser package de.atb.context.monitoring.parser.file.FileParser package de.atb.context.monitoring.parser.file.FilePairParser package de.atb.context.monitoring.parser.file.FileTripletParser package de.atb.context.monitoring.parser.webservice.MessageBrokerParser package de.atb.context.monitoring.parser.webservice.WebServiceParser package de.atb.context.monitoring.parser.GitlabCommitParser package de.atb.context.monitoring.parser.GitParser type: Currently only used for File analyser and parser. Defines the file extensions to be used.","title":"interpreters"},{"location":"context-handling/#monitors","text":"Each monitor entry has the following mandatory attributes id: The unique name of the monitor datasource: The id of one previously defined datasource (see above) interpreter: The id of one previously defined interpreter (see above) index: The id of one previously defined index (see above)","title":"monitors"}]}