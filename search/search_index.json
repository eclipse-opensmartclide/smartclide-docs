{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SmartCLIDE integrated platform. The SmartCLIDE project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 871177. For more general information about the SmartCLIDE project visit our website . About the project The main objective of SmartCLIDE is to propose a radically new smart cloud-native development environment, based on the coding-by-demonstration principle, that will support creators of cloud services in the discovery , creation, composition, testing , and deployment of full-stack data-centered services and applications in the cloud. SmartCLIDE will provide high levels of abstraction at all stages (development, testing, deployment, and run-time) as well as self-discovery of IaaS and SaaS Services. SmartCLIDE will provide several categories of abstractions: at development stage, SmartCLIDE will provide abstractions on data transformations or processing at testing stage, mechanisms to visualize flow and status or artifacts to automatically test the expected behavior at deployment stage, abstractions of physical and virtual resources or at runtime, mechanisms to monitor the performance and operation of the service The cloud nature of the environment will enable collaboration between different stakeholders, and the self-discovery of IaaS and SaaS services and the high levels of abstraction will facilitate the composition and deployment of new services to nontechnical staff (with no previous experience on programming or on the administration of systems and infrastructure). Equally, hiding the complexity of the infrastructure, and adding intelligence to this layer, will allow selecting the most adequate infrastructure services in each moment. SmartCLIDE will allow SMEs and Public Administration to boost the adoption of Cloud solutions, being validated at one solution-oriented to Public Administration (Social Security System) and three different IoT products of software development SMEs within the consortium. Modules The SmartCLIDE platform consists of the following modules: Context Handling Service Creation Service Creation Service Maintenance Test Generation Design Patterns Consortium The SmartCLIDE Consortium consists of the following partners: ATB Netcompany-Intrasoft AIR University of Macedonia (UoM) Centre for Research and Technology Hellas (CERTH) The Open Group Eclipse Foundation Wellness Telecom UNPARALLEL CONTACT Software KAIROS Digital Solutions License Distributed under the Eclipse Public License 2.0. See LICENSE for more information.","title":"Home"},{"location":"#welcome-to-the-smartclide-integrated-platform","text":"The SmartCLIDE project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 871177. For more general information about the SmartCLIDE project visit our website .","title":"Welcome to the SmartCLIDE integrated platform."},{"location":"#about-the-project","text":"The main objective of SmartCLIDE is to propose a radically new smart cloud-native development environment, based on the coding-by-demonstration principle, that will support creators of cloud services in the discovery , creation, composition, testing , and deployment of full-stack data-centered services and applications in the cloud. SmartCLIDE will provide high levels of abstraction at all stages (development, testing, deployment, and run-time) as well as self-discovery of IaaS and SaaS Services. SmartCLIDE will provide several categories of abstractions: at development stage, SmartCLIDE will provide abstractions on data transformations or processing at testing stage, mechanisms to visualize flow and status or artifacts to automatically test the expected behavior at deployment stage, abstractions of physical and virtual resources or at runtime, mechanisms to monitor the performance and operation of the service The cloud nature of the environment will enable collaboration between different stakeholders, and the self-discovery of IaaS and SaaS services and the high levels of abstraction will facilitate the composition and deployment of new services to nontechnical staff (with no previous experience on programming or on the administration of systems and infrastructure). Equally, hiding the complexity of the infrastructure, and adding intelligence to this layer, will allow selecting the most adequate infrastructure services in each moment. SmartCLIDE will allow SMEs and Public Administration to boost the adoption of Cloud solutions, being validated at one solution-oriented to Public Administration (Social Security System) and three different IoT products of software development SMEs within the consortium.","title":"About the project"},{"location":"#modules","text":"The SmartCLIDE platform consists of the following modules: Context Handling Service Creation Service Creation Service Maintenance Test Generation Design Patterns","title":"Modules"},{"location":"#consortium","text":"The SmartCLIDE Consortium consists of the following partners: ATB Netcompany-Intrasoft AIR University of Macedonia (UoM) Centre for Research and Technology Hellas (CERTH) The Open Group Eclipse Foundation Wellness Telecom UNPARALLEL CONTACT Software KAIROS Digital Solutions","title":"Consortium"},{"location":"#license","text":"Distributed under the Eclipse Public License 2.0. See LICENSE for more information.","title":"License"},{"location":"backend/","text":"Smartclide Service Creation Testing SmartCLIDE Service Creation Testing Backend Component Preconditions to build and run Service Creation Testing To build and run the backend service of Service Creation Testing, the following software is required: Java (at least version 8) Apache Maven (at least version 3.2+) Docker (for building and running the final image) How to build Service Creation Testing Service Creation Testing can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-service-creation-testing-backend:latest . How to run Service Creation Testing All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-service-creation-testing-backend:latest How to use Service Creation Testing This Spring Boot application generates automatically Unit tests, for a given project. The service includes one endpoint: Endpoint: \"/generateTests\" -> automatic generation of Unit tests. Request parameters: gitRepoURL -> String gitUsername -> String gitToken -> String","title":"Service Creation Testing"},{"location":"backend/#smartclide-service-creation-testing","text":"SmartCLIDE Service Creation Testing Backend Component","title":"Smartclide Service Creation Testing"},{"location":"backend/#preconditions-to-build-and-run-service-creation-testing","text":"To build and run the backend service of Service Creation Testing, the following software is required: Java (at least version 8) Apache Maven (at least version 3.2+) Docker (for building and running the final image)","title":"Preconditions to build and run Service Creation Testing"},{"location":"backend/#how-to-build-service-creation-testing","text":"Service Creation Testing can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-service-creation-testing-backend:latest .","title":"How to build Service Creation Testing"},{"location":"backend/#how-to-run-service-creation-testing","text":"All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-service-creation-testing-backend:latest","title":"How to run Service Creation Testing"},{"location":"backend/#how-to-use-service-creation-testing","text":"This Spring Boot application generates automatically Unit tests, for a given project. The service includes one endpoint: Endpoint: \"/generateTests\" -> automatic generation of Unit tests. Request parameters: gitRepoURL -> String gitUsername -> String gitToken -> String","title":"How to use Service Creation Testing"},{"location":"backend-reusability-index/","text":"Smartclide TD Reusability Index SmartCLIDE TD Reusability Index Backend Component Preconditions to build and run TD Reusability To build and run the backend service of TD Reusability Index, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image) How to build TD Reusability Index TD Reusability Index can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-reusability-index-backend:latest . How to run TD Reusability Index All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-td-reusability-index-backend:latest Extra dependencies of TD Reusability Index This backend has an external dependency with the TD Interest , in order to get the metrics of a specific project. This dependency is visible through the application.properties file, where there is the following variable: - interest-service.url","title":"TD Reusability Index Backend"},{"location":"backend-reusability-index/#smartclide-td-reusability-index","text":"SmartCLIDE TD Reusability Index Backend Component","title":"Smartclide TD Reusability Index"},{"location":"backend-reusability-index/#preconditions-to-build-and-run-td-reusability","text":"To build and run the backend service of TD Reusability Index, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image)","title":"Preconditions to build and run TD Reusability"},{"location":"backend-reusability-index/#how-to-build-td-reusability-index","text":"TD Reusability Index can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-reusability-index-backend:latest .","title":"How to build TD Reusability Index"},{"location":"backend-reusability-index/#how-to-run-td-reusability-index","text":"All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-td-reusability-index-backend:latest","title":"How to run TD Reusability Index"},{"location":"backend-reusability-index/#extra-dependencies-of-td-reusability-index","text":"This backend has an external dependency with the TD Interest , in order to get the metrics of a specific project. This dependency is visible through the application.properties file, where there is the following variable: - interest-service.url","title":"Extra dependencies of TD Reusability Index"},{"location":"backend-td-interest/","text":"Smartclide TD Interest SmartCLIDE TD Interest Backend Component Preconditions to build and run TD Interest To build and run the backend service of TD Interest, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image) How to build TD Interest TD Interest can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-interest-backend:latest . How to run TD Interest All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-td-interest-backend:latest Extra dependencies of TD Interest This component uses an internal database in order to calculate the TD Interest, as from its definition requires historical data. This database is a postgresql where the schema can be found here . After the creation of the database, the properties for accessing the database can be changed from here . In order to change the database url, username, and password. - spring.datasource.url=jdbc:postgresql://localhost:5432/tdinterest - spring.datasource.username=tdinterest - spring.datasource.password=tdinterest","title":"TD Interest Backend"},{"location":"backend-td-interest/#smartclide-td-interest","text":"SmartCLIDE TD Interest Backend Component","title":"Smartclide TD Interest"},{"location":"backend-td-interest/#preconditions-to-build-and-run-td-interest","text":"To build and run the backend service of TD Interest, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image)","title":"Preconditions to build and run TD Interest"},{"location":"backend-td-interest/#how-to-build-td-interest","text":"TD Interest can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-interest-backend:latest .","title":"How to build TD Interest"},{"location":"backend-td-interest/#how-to-run-td-interest","text":"All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-td-interest-backend:latest","title":"How to run TD Interest"},{"location":"backend-td-interest/#extra-dependencies-of-td-interest","text":"This component uses an internal database in order to calculate the TD Interest, as from its definition requires historical data. This database is a postgresql where the schema can be found here . After the creation of the database, the properties for accessing the database can be changed from here . In order to change the database url, username, and password. - spring.datasource.url=jdbc:postgresql://localhost:5432/tdinterest - spring.datasource.username=tdinterest - spring.datasource.password=tdinterest","title":"Extra dependencies of TD Interest"},{"location":"backend-td-principal/","text":"Smartclide TD Principal SmartCLIDE TD Principal Backend Component Preconditions to build and run TD Principal To build and run the backend service of TD Principal, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image) How to build TD Principal TD Principal can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-principal-backend:latest . How to run TD Principal All the images of this component can be found here . You can run the backend service with the following command: docker run -p 8555:8555 smartclide-td-principal-backend:latest How to configure TD Principal application.properties The main properties of this backend service can be found here , and are the following: - server.port=8555, In order for the service to start in the 8555 port - gr.nikos.smartclide.sonarqube.url=http://localhost:9000, In order to get the SonarQube instance and the in case this is not configured in the beginning of the service it's going to be the localhost. Docker The main thing that should be configured is the SonarQube instance, as in the majority of the cases the SonarQube is not going to be in the localhost. This can be achieved by using the following environment variable: docker run -p 8555:8555 -e GR_NIKOS_SMARTCLIDE_SONARQUBE_URL=${SONARQUBE_URL} smartclide-td-principal-backend:latest More specifically: docker run -p 8555:8555 -e GR_NIKOS_SMARTCLIDE_SONARQUBE_URL=http://1.1.1.1:9000 smartclide-td-principal-backend:latest","title":"TD Principal Backend"},{"location":"backend-td-principal/#smartclide-td-principal","text":"SmartCLIDE TD Principal Backend Component","title":"Smartclide TD Principal"},{"location":"backend-td-principal/#preconditions-to-build-and-run-td-principal","text":"To build and run the backend service of TD Principal, the following software is required: Java (at least version 11) Apache Maven (at least version 3.2+) Docker (for building and running the final image)","title":"Preconditions to build and run TD Principal"},{"location":"backend-td-principal/#how-to-build-td-principal","text":"TD Principal can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-td-principal-backend:latest .","title":"How to build TD Principal"},{"location":"backend-td-principal/#how-to-run-td-principal","text":"All the images of this component can be found here . You can run the backend service with the following command: docker run -p 8555:8555 smartclide-td-principal-backend:latest","title":"How to run TD Principal"},{"location":"backend-td-principal/#how-to-configure-td-principal","text":"application.properties The main properties of this backend service can be found here , and are the following: - server.port=8555, In order for the service to start in the 8555 port - gr.nikos.smartclide.sonarqube.url=http://localhost:9000, In order to get the SonarQube instance and the in case this is not configured in the beginning of the service it's going to be the localhost. Docker The main thing that should be configured is the SonarQube instance, as in the majority of the cases the SonarQube is not going to be in the localhost. This can be achieved by using the following environment variable: docker run -p 8555:8555 -e GR_NIKOS_SMARTCLIDE_SONARQUBE_URL=${SONARQUBE_URL} smartclide-td-principal-backend:latest More specifically: docker run -p 8555:8555 -e GR_NIKOS_SMARTCLIDE_SONARQUBE_URL=http://1.1.1.1:9000 smartclide-td-principal-backend:latest","title":"How to configure TD Principal"},{"location":"context-handling/","text":"smartclide-context SmartCLIDE Context Handling Component Preconditions to build and run Context Handling To build and run Context Handling, the following software is required: Java (at least version 11) Apache Maven (at least version 3.5.4) Docker (for running tests and deploying Context Handling on the SmartCLIDE cluster) docker-compose (for running local sample instance only) How to build Context Handling Context Handling can be built using maven with the following command: shell mvn install In order to build and push a container image that can be deployed, the following command can be used: shell mvn install mvn jib:build -pl smartclide-monitoring -Djib.to.image=\"${IMAGE_NAME:IMAGE_TAG}\" -Djib.to.auth.username=\"${CONTAINER_REGISTRY_USERNAME}\" -Djib.to.auth.password=\"${CONTAINER_REGISTRY_TOKEN}\" How to run Context Handling A sample configuration and docker-compose file can be found in the samples folder . You can run the sample with the following command: shell docker-compose -f samples/docker-compose.yml up How to configure Context Handling Monitoring Config monitoring-config.xml An example monitoring configuration can be found here: monitoring-config.xml monitoring-config.xsd The corresponding XSD file can be found here: monitoring-config.xsd Description indexes Each index entry has the following mandatory attributes id: The unique name of the index location: The URI of the location the index is stored datasources Each datasource entry has the following mandatory attributes id:The unique name of the datasource type:The type of the datasource. Possible values are: filesystem, webservice, database, messageBroker monitor:The class of the monitor to be used. Possible values are: package de.atb.context.monitoring.monitors.database.DatabaseMonitor package de.atb.context.monitoring.monitors.file.FileSystemMonitor package de.atb.context.monitoring.monitors.file.FilePairSystemMonitor package de.atb.context.monitoring.monitors.file.FileTripletSystemMonitor package de.atb.context.monitoring.monitors.webservice.MessageBrokerMonitor package de.atb.context.monitoring.monitors.webservice.WebServiceMonitor package de.atb.context.monitoring.monitors.GitlabCommitMonitor package de.atb.context.monitoring.monitors.GitMonitor options: Options for the datasource can be entered using this value. The options are dependent on the datasource to be used uri:The uri of the data source to be monitored class:The following datasource implementations are available package de.atb.context.monitoring.config.models.datasources.DatabaseDataSource package de.atb.context.monitoring.config.models.datasources.FilePairSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileTripletSystemDataSource package de.atb.context.monitoring.config.models.datasources.MessageBrokerDataSource package de.atb.context.monitoring.config.models.datasources.WebServiceDataSource package de.atb.context.monitoring.config.models.datasources.GitlabDataSource interpreters Each interpreter entry has the following mandatory attributes id: The unique name of the interpreter configuration analyser: The analyser class to be used. The following implementations are available: package de.atb.context.monitoring.analyser.database.DatabaseAnalyser package de.atb.context.monitoring.analyser.file.FileAnalyser package de.atb.context.monitoring.analyser.file.FilePairAnalyser package de.atb.context.monitoring.analyser.file.FileTripletAnalyser package de.atb.context.monitoring.analyser.webservice.MessageBrokerAnalyser package de.atb.context.monitoring.analyser.webservice.WebServiceAnalyser package de.atb.context.monitoring.analyser.webserviceGitAnalyser package de.atb.context.monitoring.analyser.webservice.GitlabCommitAnalyser parser: The parser class to be used. The following implementations are available: package de.atb.context.monitoring.parser.database.DatabaseParser package de.atb.context.monitoring.parser.file.FileParser package de.atb.context.monitoring.parser.file.FilePairParser package de.atb.context.monitoring.parser.file.FileTripletParser package de.atb.context.monitoring.parser.webservice.MessageBrokerParser package de.atb.context.monitoring.parser.webservice.WebServiceParser package de.atb.context.monitoring.parser.GitlabCommitParser package de.atb.context.monitoring.parser.GitParser type: Currently only used for File analyser and parser. Defines the file extensions to be used. monitors Each monitor entry has the following mandatory attributes id: The unique name of the monitor datasource: The id of one previously defined datasource (see above) interpreter: The id of one previously defined interpreter (see above) index: The id of one previously defined index (see above)","title":"Context Handling"},{"location":"context-handling/#smartclide-context","text":"SmartCLIDE Context Handling Component","title":"smartclide-context"},{"location":"context-handling/#preconditions-to-build-and-run-context-handling","text":"To build and run Context Handling, the following software is required: Java (at least version 11) Apache Maven (at least version 3.5.4) Docker (for running tests and deploying Context Handling on the SmartCLIDE cluster) docker-compose (for running local sample instance only)","title":"Preconditions to build and run Context Handling"},{"location":"context-handling/#how-to-build-context-handling","text":"Context Handling can be built using maven with the following command: shell mvn install In order to build and push a container image that can be deployed, the following command can be used: shell mvn install mvn jib:build -pl smartclide-monitoring -Djib.to.image=\"${IMAGE_NAME:IMAGE_TAG}\" -Djib.to.auth.username=\"${CONTAINER_REGISTRY_USERNAME}\" -Djib.to.auth.password=\"${CONTAINER_REGISTRY_TOKEN}\"","title":"How to build Context Handling"},{"location":"context-handling/#how-to-run-context-handling","text":"A sample configuration and docker-compose file can be found in the samples folder . You can run the sample with the following command: shell docker-compose -f samples/docker-compose.yml up","title":"How to run Context Handling"},{"location":"context-handling/#how-to-configure-context-handling","text":"","title":"How to configure Context Handling"},{"location":"context-handling/#monitoring-config","text":"monitoring-config.xml An example monitoring configuration can be found here: monitoring-config.xml monitoring-config.xsd The corresponding XSD file can be found here: monitoring-config.xsd","title":"Monitoring Config"},{"location":"context-handling/#description","text":"","title":"Description"},{"location":"context-handling/#indexes","text":"Each index entry has the following mandatory attributes id: The unique name of the index location: The URI of the location the index is stored","title":"indexes"},{"location":"context-handling/#datasources","text":"Each datasource entry has the following mandatory attributes id:The unique name of the datasource type:The type of the datasource. Possible values are: filesystem, webservice, database, messageBroker monitor:The class of the monitor to be used. Possible values are: package de.atb.context.monitoring.monitors.database.DatabaseMonitor package de.atb.context.monitoring.monitors.file.FileSystemMonitor package de.atb.context.monitoring.monitors.file.FilePairSystemMonitor package de.atb.context.monitoring.monitors.file.FileTripletSystemMonitor package de.atb.context.monitoring.monitors.webservice.MessageBrokerMonitor package de.atb.context.monitoring.monitors.webservice.WebServiceMonitor package de.atb.context.monitoring.monitors.GitlabCommitMonitor package de.atb.context.monitoring.monitors.GitMonitor options: Options for the datasource can be entered using this value. The options are dependent on the datasource to be used uri:The uri of the data source to be monitored class:The following datasource implementations are available package de.atb.context.monitoring.config.models.datasources.DatabaseDataSource package de.atb.context.monitoring.config.models.datasources.FilePairSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileSystemDataSource package de.atb.context.monitoring.config.models.datasources.FileTripletSystemDataSource package de.atb.context.monitoring.config.models.datasources.MessageBrokerDataSource package de.atb.context.monitoring.config.models.datasources.WebServiceDataSource package de.atb.context.monitoring.config.models.datasources.GitlabDataSource","title":"datasources"},{"location":"context-handling/#interpreters","text":"Each interpreter entry has the following mandatory attributes id: The unique name of the interpreter configuration analyser: The analyser class to be used. The following implementations are available: package de.atb.context.monitoring.analyser.database.DatabaseAnalyser package de.atb.context.monitoring.analyser.file.FileAnalyser package de.atb.context.monitoring.analyser.file.FilePairAnalyser package de.atb.context.monitoring.analyser.file.FileTripletAnalyser package de.atb.context.monitoring.analyser.webservice.MessageBrokerAnalyser package de.atb.context.monitoring.analyser.webservice.WebServiceAnalyser package de.atb.context.monitoring.analyser.webserviceGitAnalyser package de.atb.context.monitoring.analyser.webservice.GitlabCommitAnalyser parser: The parser class to be used. The following implementations are available: package de.atb.context.monitoring.parser.database.DatabaseParser package de.atb.context.monitoring.parser.file.FileParser package de.atb.context.monitoring.parser.file.FilePairParser package de.atb.context.monitoring.parser.file.FileTripletParser package de.atb.context.monitoring.parser.webservice.MessageBrokerParser package de.atb.context.monitoring.parser.webservice.WebServiceParser package de.atb.context.monitoring.parser.GitlabCommitParser package de.atb.context.monitoring.parser.GitParser type: Currently only used for File analyser and parser. Defines the file extensions to be used.","title":"interpreters"},{"location":"context-handling/#monitors","text":"Each monitor entry has the following mandatory attributes id: The unique name of the monitor datasource: The id of one previously defined datasource (see above) interpreter: The id of one previously defined interpreter (see above) index: The id of one previously defined index (see above)","title":"monitors"},{"location":"design-patterns/","text":"Smartclide Design Pattern Selection SmartCLIDE Design Pattern Selection Frontend Component Preconditions to build and run Design Pattern Selection Frontend To build and run the frontend Design Pattern Selection extension of Theia, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn How to build Design Pattern Selection Frontend The Design Pattern Selection Frontend can be built using the following command: yarn How to run Design Pattern Selection Frontend After building the theia extension, you can start a local instance of theia with our extension. Running the browser example yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser.","title":"Design Pattern Selection Frontend"},{"location":"design-patterns/#smartclide-design-pattern-selection","text":"SmartCLIDE Design Pattern Selection Frontend Component","title":"Smartclide Design Pattern Selection"},{"location":"design-patterns/#preconditions-to-build-and-run-design-pattern-selection-frontend","text":"To build and run the frontend Design Pattern Selection extension of Theia, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn","title":"Preconditions to build and run Design Pattern Selection Frontend"},{"location":"design-patterns/#how-to-build-design-pattern-selection-frontend","text":"The Design Pattern Selection Frontend can be built using the following command: yarn","title":"How to build Design Pattern Selection Frontend"},{"location":"design-patterns/#how-to-run-design-pattern-selection-frontend","text":"After building the theia extension, you can start a local instance of theia with our extension.","title":"How to run Design Pattern Selection Frontend"},{"location":"design-patterns/#running-the-browser-example","text":"yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser.","title":"Running the browser example"},{"location":"frontend/","text":"Smartclide Service Creation Testing SmartCLIDE Service Creation Testing Frontend Component Preconditions to build and run Service Creation Testing Frontend To build and run the frontend Design Pattern Selection extension of Theia, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn How to build Service Creation Testing Frontend The Service Creation Testing Frontend can be built using the following command: yarn How to run Service Creation Testing Frontend After building the theia extension, you can start a local instance of theia with our extension. Running the browser example yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser.","title":"Service Creation Testing Frontend"},{"location":"frontend/#smartclide-service-creation-testing","text":"SmartCLIDE Service Creation Testing Frontend Component","title":"Smartclide Service Creation Testing"},{"location":"frontend/#preconditions-to-build-and-run-service-creation-testing-frontend","text":"To build and run the frontend Design Pattern Selection extension of Theia, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn","title":"Preconditions to build and run Service Creation Testing Frontend"},{"location":"frontend/#how-to-build-service-creation-testing-frontend","text":"The Service Creation Testing Frontend can be built using the following command: yarn","title":"How to build Service Creation Testing Frontend"},{"location":"frontend/#how-to-run-service-creation-testing-frontend","text":"After building the theia extension, you can start a local instance of theia with our extension.","title":"How to run Service Creation Testing Frontend"},{"location":"frontend/#running-the-browser-example","text":"yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser.","title":"Running the browser example"},{"location":"frontend-td-reusability/","text":"Smartclide TD & Reusability SmartCLIDE TD Principal-Interest & Reusability Frontend Component Preconditions to build and run TD Principal-Interest & Reusability Frontend To build and run the frontend of TD Principal-Interest & Reusability, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn How to build TD Principal-Interest & Reusability Frontend TD Principal-Interest & Reusability Frontend can be built using the following command: yarn How to run TD Principal-Interest & Reusability Frontend After building the theia extension, you can start a local instance of theia with our extension. Running the browser example yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser. Running the Electron example yarn start:electron or: yarn rebuild:electron cd electron-app yarn start or: launch Start Electron Backend configuration from VS code.","title":"TD & Reusability Frontend"},{"location":"frontend-td-reusability/#smartclide-td-reusability","text":"SmartCLIDE TD Principal-Interest & Reusability Frontend Component","title":"Smartclide TD &amp; Reusability"},{"location":"frontend-td-reusability/#preconditions-to-build-and-run-td-principal-interest-reusability-frontend","text":"To build and run the frontend of TD Principal-Interest & Reusability, the following software is required: Python Node.js with visual studio build tools (this can be selected in the optional tools during the node.js installation or after hand in several ways, ex. with npm, or with visual studio installer) Yarn package manager npm install --global yarn","title":"Preconditions to build and run TD Principal-Interest &amp; Reusability Frontend"},{"location":"frontend-td-reusability/#how-to-build-td-principal-interest-reusability-frontend","text":"TD Principal-Interest & Reusability Frontend can be built using the following command: yarn","title":"How to build TD Principal-Interest &amp; Reusability Frontend"},{"location":"frontend-td-reusability/#how-to-run-td-principal-interest-reusability-frontend","text":"After building the theia extension, you can start a local instance of theia with our extension.","title":"How to run TD Principal-Interest &amp; Reusability Frontend"},{"location":"frontend-td-reusability/#running-the-browser-example","text":"yarn start:browser or: yarn rebuild:browser cd browser-app yarn start or: launch Start Browser Backend configuration from VS code. Open http://localhost:3000 in the browser.","title":"Running the browser example"},{"location":"frontend-td-reusability/#running-the-electron-example","text":"yarn start:electron or: yarn rebuild:electron cd electron-app yarn start or: launch Start Electron Backend configuration from VS code.","title":"Running the Electron example"},{"location":"service-creation-backend/","text":"SmartCLIDE Service Creation SmartCLIDE Service Creation Backend Component Preconditions to build and run Service Creation To build and run the backend service of Service Creation, the following software is required: Java (at least version 8) Apache Maven (at least version 3.2+) Docker (for building and running the final image) How to build Service Creation Service Creation can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-service-creation:latest . How to run Service Creation All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-service-creation:latest How to use Service Creation This backend service leverages the provided GitLab and Jenkins APIs in order to authenticate a User and create a new repository based on the options selected by the User. Furthermore, depending on the User\u2019s choices, the newly created repository can be paired with a Jenkins CI/CD. The component creates a new Jenkins CI/CD pipeline and then performs the necessary configuration actions (webhooks, ect.) in order to complete the pairing process. As a result, the process is completed automatically, thus sparing the User from the manual use and configuration of the external tools. The service includes two endpoints: Endpoint 1: \"/createStructure\" -> creates a GitLab repository. Request parameters: projectName -> String projVisibility -> String projDescription -> String gitLabServerURL -> String gitlabToken -> String Endpoint 2: \"/createStuctureJenkins\" -> creates a GitLab repository and a Jenkins pipeline and finaly configures and pairs them. Request parameters: projectName -> String projVisibility -> String projDescription -> String gitLabServerURL -> String gitlabToken -> String jenkinsServerUrl -> String jenkinsUsername -> String jenkinsToken -> String","title":"Service Creation Backend"},{"location":"service-creation-backend/#smartclide-service-creation","text":"SmartCLIDE Service Creation Backend Component","title":"SmartCLIDE Service Creation"},{"location":"service-creation-backend/#preconditions-to-build-and-run-service-creation","text":"To build and run the backend service of Service Creation, the following software is required: Java (at least version 8) Apache Maven (at least version 3.2+) Docker (for building and running the final image)","title":"Preconditions to build and run Service Creation"},{"location":"service-creation-backend/#how-to-build-service-creation","text":"Service Creation can be built using maven with the following command: mvn install In order to build a Docker image of the service that can be deployed, the following commands can be used: mvn install docker build -t ${IMAGE_NAME:IMAGE_TAG} . More specifically: mvn install docker build -t smartclide-service-creation:latest .","title":"How to build Service Creation"},{"location":"service-creation-backend/#how-to-run-service-creation","text":"All the images of this component can be found here . You can run the backend service with the following command: docker run smartclide-service-creation:latest","title":"How to run Service Creation"},{"location":"service-creation-backend/#how-to-use-service-creation","text":"This backend service leverages the provided GitLab and Jenkins APIs in order to authenticate a User and create a new repository based on the options selected by the User. Furthermore, depending on the User\u2019s choices, the newly created repository can be paired with a Jenkins CI/CD. The component creates a new Jenkins CI/CD pipeline and then performs the necessary configuration actions (webhooks, ect.) in order to complete the pairing process. As a result, the process is completed automatically, thus sparing the User from the manual use and configuration of the external tools. The service includes two endpoints: Endpoint 1: \"/createStructure\" -> creates a GitLab repository. Request parameters: projectName -> String projVisibility -> String projDescription -> String gitLabServerURL -> String gitlabToken -> String Endpoint 2: \"/createStuctureJenkins\" -> creates a GitLab repository and a Jenkins pipeline and finaly configures and pairs them. Request parameters: projectName -> String projVisibility -> String projDescription -> String gitLabServerURL -> String gitlabToken -> String jenkinsServerUrl -> String jenkinsUsername -> String jenkinsToken -> String","title":"How to use Service Creation"},{"location":"service-discovery/","text":"Service Discovery API - SmartCLIDE Maintainer: @dabm-git - AIR Institute Configure This package relies on tokens from GitGub, GitLab and BitBucket APIs that are configured in the config.ini file in the root of the service. The service also depends on an instance of Elasticsearch to store and collect information, where the configuration of the IP, port and credentials are done in this same file. See: https://github.com/eclipse-researchlabs/smartclide-service-discovery-poc/blob/main/ServiceDiscovery/config.ini The service makes use of the 2020 port, be sure to expose it. Build python3 -m pip install --no-cache-dir -r requirements.txt python3 -m pip install . --upgrade Or build the image with the provided dockerfile. Run python3 servicediscovery Or using the built docker image hosted by ghcr.io, with docker-compose. docker-compose up version: '3' services: service_discovery: restart: unless-stopped image: ghcr.io/eclipse-researchlabs/smartclide/service-discovery:2022-04-04 working_dir: /app/smartclide-service-discovery-poc/ServiceDiscovery command: python3 ServiceDiscovery ports: - \"2020:2020\" Be sure to replace the necessary configuration in the config.ini file, to do this you can overwrite it with the following section in docker-compose.yml: volumes: -./config.ini:/app/smartclide-service-discovery-poc/ServiceDiscovery/config.ini Web service listings - SmartCLIDE Maintainer: @dabm-git - AIR Institute Run This script collects information from Programableweb, to avoid saturation and blocking of IP addresses by a high number of requests, this script can be executed on a regular basis, obtaining a section each time. When launched, information is collected in batches that are exported to .csv files, and when a batch is finished, the results are merged under the same .csv file.","title":"Service Discovery"},{"location":"service-discovery/#service-discovery-api-smartclide","text":"Maintainer: @dabm-git - AIR Institute","title":"Service Discovery API - SmartCLIDE"},{"location":"service-discovery/#configure","text":"This package relies on tokens from GitGub, GitLab and BitBucket APIs that are configured in the config.ini file in the root of the service. The service also depends on an instance of Elasticsearch to store and collect information, where the configuration of the IP, port and credentials are done in this same file. See: https://github.com/eclipse-researchlabs/smartclide-service-discovery-poc/blob/main/ServiceDiscovery/config.ini The service makes use of the 2020 port, be sure to expose it.","title":"Configure"},{"location":"service-discovery/#build","text":"python3 -m pip install --no-cache-dir -r requirements.txt python3 -m pip install . --upgrade Or build the image with the provided dockerfile.","title":"Build"},{"location":"service-discovery/#run","text":"python3 servicediscovery Or using the built docker image hosted by ghcr.io, with docker-compose. docker-compose up version: '3' services: service_discovery: restart: unless-stopped image: ghcr.io/eclipse-researchlabs/smartclide/service-discovery:2022-04-04 working_dir: /app/smartclide-service-discovery-poc/ServiceDiscovery command: python3 ServiceDiscovery ports: - \"2020:2020\" Be sure to replace the necessary configuration in the config.ini file, to do this you can overwrite it with the following section in docker-compose.yml: volumes: -./config.ini:/app/smartclide-service-discovery-poc/ServiceDiscovery/config.ini","title":"Run"},{"location":"service-discovery/#web-service-listings-smartclide","text":"Maintainer: @dabm-git - AIR Institute","title":"Web service listings - SmartCLIDE"},{"location":"service-discovery/#run_1","text":"This script collects information from Programableweb, to avoid saturation and blocking of IP addresses by a high number of requests, this script can be executed on a regular basis, obtaining a section each time. When launched, information is collected in batches that are exported to .csv files, and when a batch is finished, the results are merged under the same .csv file.","title":"Run"}]}